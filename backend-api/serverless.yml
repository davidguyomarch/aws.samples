service: HelloApi

# Inputs
#   AppName
#   NoteDynamodbTableArn: the Arn of the dynamodb table
#   ReadCapacityUnits
#   WriteCapacityUnits

custom:
  # AppName: ${opt:AppName, 'hello-app-api'}
  # ReadCapacityUnits: ${opt:ReadCapacityUnits, 5}
  # WriteCapacityUnits: ${opt:WriteCapacityUnits, 10}
  AppName: 'HelloApi'
  ReadCapacityUnits: 5
  WriteCapacityUnits: 10

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: ${opt:region, 'eu-central-1'}
#    TODO: would be nice to use something like Ref: 'AWS::Region' to get region from .aws/config
  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
      Resource:
        'Fn::GetAtt': [myDynamoDBTable, Arn]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  hello:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: index.hello
    events:
      - http:
          path: hello
          method: get
          request:
            parameters:
              querystrings:
                hello: true
          cors: true
          authorizer: aws_iam
  list:
    handler: index.list
    events:
      - http:
          path: notes
          method: get
          request:
            parameters:
              querystrings:
                userId: true
          cors: true
          authorizer: aws_iam
  create:
    handler: index.create
    events:
      - http:
          path: notes
          method: post
          # request:
          #   parameters:
          #     querystrings:
          #       userId: true
          cors: true
          authorizer: aws_iam
  count:
    handler: index.count
    events:
      - http:
          path: notes/count
          method: get
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    # IAM role to enable logging for API Gateway.
    CloudWatchRole:
     Type: "AWS::IAM::Role"
     Properties:
      AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
        - Effect: Allow
          Principal:
           Service:
            - "apigateway.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
       - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

    Account:
      Type: "AWS::ApiGateway::Account"
      Properties:
        CloudWatchRoleArn:
          "Fn::GetAtt":
            - CloudWatchRole
            - Arn
    #
    # ApiGatewayStage:
    #   Type: AWS::ApiGateway::Stage
    #   Properties:
    #     # StageName: Prod
    #     # Description: Prod Stage
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     DeploymentId:
    #       Ref: TestDeployment
    #     MethodSettings:
    #       - DataTraceEnabled: true
    #         HttpMethod: "*"
    #         LoggingLevel: INFO
    #         ResourcePath: "/*"
    #         MetricsEnabled: true

  ################################################################################
  # Cognito User Pool Config                                                     #
  ################################################################################
    MyCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.AppName}UserPool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: false
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          UnusedAccountValidityDays: 5

    MyCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.AppName}Client
        ExplicitAuthFlows:
          -  ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        UserPoolId:
          Ref: 'MyCognitoUserPool'

    MyCognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.AppName}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: MyCognitoUserPoolClient
            ProviderName:
              'Fn::GetAtt': [MyCognitoUserPool, ProviderName]

    MyCognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: MyCognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource:
                    # - arn:aws:execute-api:${self:provider.region}:account-id:api-id/stage/METHOD_HTTP_VERB/Resource-path
                    # - arn:aws:execute-api:${self:provider.region}:*:uwb7mddira/${self:provider.stage}/GET/hello
                    - Fn::Join:
                      - ""
                      - - "arn:aws:execute-api:${self:provider.region}:"
                        - Ref: "AWS::AccountId"
                        - ":"
                        - Ref: "ApiGatewayRestApi"
                        - "/${self:provider.stage}/GET/hello"
                    - Fn::Join:
                      - ""
                      - - "arn:aws:execute-api:${self:provider.region}:"
                        - Ref: "AWS::AccountId"
                        - ":"
                        - Ref: "ApiGatewayRestApi"
                        - "/${self:provider.stage}/GET/notes/count"

    MyCognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: MyCognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated

    # Assigns the roles to the Identity Pool
    MyCognitoIdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: MyCognitoIdentityPool
        Roles:
          authenticated:
            'Fn::GetAtt': [MyCognitoAuthorizedRole, Arn]
          unauthenticated:
            'Fn::GetAtt': [MyCognitoUnAuthorizedRole, Arn]

    myDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'notes'
        AttributeDefinitions:
        - AttributeName: 'userId'
          AttributeType: S
        - AttributeName: 'noteId'
          AttributeType: S
        KeySchema:
        - AttributeName: 'userId'
          KeyType: HASH
        - AttributeName: 'noteId'
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.ReadCapacityUnits}
          WriteCapacityUnits: ${self:custom.WriteCapacityUnits}

  Outputs:
    CognitoUserPoolName:
      Value:
        Ref: MyCognitoUserPool
      Description: logical ID of the Cognito User Pool

    CognitoUserPoolArn:
      Value:
        'Fn::GetAtt': [ MyCognitoUserPool, Arn ]
      Description: Arn of the Cognito User Pool

    CognitoIdentityPoolId:
      Value:
        Ref: MyCognitoIdentityPool
      Description: Id of the Cognito Identity Pool

    CognitoIdentityPoolClientId:
      Value:
        Ref: MyCognitoUserPoolClient
      Description: Id of the Cognito User Pool Client

    CognitoUserPoolClientSecret:
      Value:
        'Fn::GetAtt': [ MyCognitoUserPoolClient, ClientSecret ]
      Description: Secret of the Client App

    DynamoDBTableArn:
      Value:
        'Fn::GetAtt': [ myDynamoDBTable, Arn ]
      Description: Arn of the myDynamoDBTable.
