service: hello-app-api

# Inputs
#   NoteDynamodbTableArn: the Arn of the dynamodb table





# # Use serverless-webpack plugin to transpile ES6/ES7
# plugins:
#   - serverless-webpack
#
# # Enable auto-packing of external modules
# custom:
#   webpackIncludeModules: true
#
provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: eu-central-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
      Resource: "${opt:NoteDynamodbTableArn}"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  hello:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: index.hello
    events:
      - http:
          path: hello
          method: get
          request:
            parameters:
              querystrings:
                hello: true
          cors: true
          authorizer: aws_iam
  list:
    handler: index.list
    events:
      - http:
          path: notes
          method: get
          request:
            parameters:
              querystrings:
                userId: true
          cors: true
          # authorizer: aws_iam
  create:
    handler: index.create
    events:
      - http:
          path: notes
          method: post
          # request:
          #   parameters:
          #     querystrings:
          #       userId: true
          cors: true
          # authorizer: aws_iam
  count:
    handler: index.count
    events:
      - http:
          path: notes/count
          method: get
          cors: true
          authorizer: aws_iam
resources:
  Resources:
    # S3 Bucket to store the static page of the web site.
    FrontEndS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:BucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedOrigins: ['*']
            Id: CORSRule
            MaxAge: '3600'
        WebsiteConfiguration:
          ErrorDocument: "index.html"
          IndexDocument: "index.html"

    FrontEndS3BucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref FrontEndS3Bucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource:
                - !Sub arn:aws:s3:::${opt:FrontEndS3Bucket}/*
              Principal: "*"

  ################################################################################
  # Cognito User Pool Config                                                     #
  ################################################################################
    MyCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Sub ${opt:AppName}UserPool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: false
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          UnusedAccountValidityDays: 5

    MyCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub ${opt:AppName}Client
        ExplicitAuthFlows:
          -  ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        UserPoolId: !Ref 'MyCognitoUserPool'

    MyCognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: !Sub ${opt:AppName}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref MyCognitoUserPoolClient
            ProviderName: !GetAtt MyCognitoUserPool.ProviderName

    MyCognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref MyCognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource:
                    - !Sub arn:aws:executeapi:${AWS::Region}:*:c1jk9z77u9/*

    MyCognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref MyCognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated

    # Assigns the roles to the Identity Pool
    MyCognitoIdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId: !Ref MyCognitoIdentityPool
        Roles:
          authenticated: !GetAtt MyCognitoAuthorizedRole.Arn
          unauthenticated: !GetAtt MyCognitoUnAuthorizedRole.Arn

    myDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'notes'
        AttributeDefinitions:
        - AttributeName: 'userId'
          AttributeType: S
        - AttributeName: 'noteId'
          AttributeType: S
        KeySchema:
        - AttributeName: 'userId'
          KeyType: HASH
        - AttributeName: 'noteId'
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${opt:ReadCapacityUnits}
          WriteCapacityUnits: ${opt:WriteCapacityUnits}

  Outputs:
    # MainAPIEndPoint:
    #   Value: !Sub 'http://${NetLoadBalancer.DNSName}'
    #   Description: Newly created application URL (won't work from the outside of your AWS VPC) -- TO BE CONFIRMED! --
    HomePageURL:
      Value: !GetAtt FrontEndS3Bucket.WebsiteURL
      Description: Main page of the web app.

    CognitoUserPoolName:
      Value: !Ref 'MyCognitoUserPool'
      Description: logical ID of the Cognito User Pool

    CognitoUserPoolArn:
      Value: !GetAtt MyCognitoUserPool.Arn
      Description: Arn of the Cognito User Pool

    CognitoIdentityPoolId:
      Value: !Ref MyCognitoIdentityPool
      Description: Id of the Cognito Identity Pool

    CognitoIdentityPoolClientId:
      Value: !Ref MyCognitoUserPoolClient
      Description: Id of the Cognito User Pool Client

    CognitoUserPoolClientSecret:
      Value: !GetAtt MyCognitoUserPoolClient.ClientSecret
      Description: Secret of the Client App

    DynamoDBTableArn:
      Value: !GetAtt myDynamoDBTable.Arn
      Description: Arn of the myDynamoDBTable.
