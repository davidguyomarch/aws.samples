AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template of the BPCE Marketplace framework

Parameters:
  BucketName:
    Description: Name of the S3 Bucket to store the marketplace frontend
    Type: String
    Default: oab-bpce-marketplace-frontend-bucket

Resources:
  # S3 Bucket to store the static page of the web site.
  FrontEndS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, POST, HEAD]
          AllowedOrigins: ['*']
          Id: CORSRule
          MaxAge: '3600'
      WebsiteConfiguration:
        ErrorDocument: "index.html"
        IndexDocument: "index.html"

  FrontEndS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref FrontEndS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              - !Sub arn:aws:s3:::${FrontEndS3Bucket}/*
            Principal: "*"
  # VPC:
  #   Type: 'AWS::EC2::VPC'
  #   Properties:
  #     EnableDnsSupport: 'true'
  #     EnableDnsHostnames: 'true'
  #     CidrBlock: 10.0.0.0/16
  #
  # PublicSubnetA:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     CidrBlock: 10.0.0.0/24
  #     AvailabilityZone: !Sub ${AWS::Region}a
  #     VpcId: !Ref VPC
  #
  # PublicSubnetB:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     CidrBlock: 10.0.1.0/24
  #     AvailabilityZone: !Sub ${AWS::Region}b
  #     VpcId: !Ref VPC
  #
  # InternetGateway:
  #   Type: 'AWS::EC2::InternetGateway'
  #
  # VPCGatewayAttachment:
  #   Type: 'AWS::EC2::VPCGatewayAttachment'
  #   Properties:
  #     VpcId: !Ref VPC
  #     InternetGatewayId: !Ref InternetGateway
  #
  # PublicRouteTable:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #     VpcId: !Ref VPC
  #
  # PublicRoute:
  #   Type: 'AWS::EC2::Route'
  #   DependsOn: VPCGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway
  #
  # PublicSubnetRouteTableAssociationA:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnetA
  #     RouteTableId: !Ref PublicRouteTable
  #
  # PublicSubnetRouteTableAssociationB:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnetB
  #     RouteTableId: !Ref PublicRouteTable

  # LoadBalancerSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     VpcId: !Ref VPC
  #     GroupDescription: Allow access from HTTP traffic
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 0.0.0.0/0

  # NetLoadBalancer:
  #   Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  #   Properties:
  #     Subnets:
  #       - !Ref PublicSubnetA
  #       - !Ref PublicSubnetB
  #     Scheme: internal
  #     Type: network
  #     IpAddressType: ipv4
  #
  # MyVpcLink:
  #   Type: AWS::ApiGateway::VpcLink
  #   Properties:
  #       Description: Link between my Private Network and my ApiGateways
  #       Name: PrivateApiGatewayEndpoint
  #       TargetArns:
  #          - !Ref NetLoadBalancer

Outputs:
  HomePageURL:
    Value: !GetAtt FrontEndS3Bucket.WebsiteURL
    Description: Main page of the web app.
